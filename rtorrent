#!/bin/bash
# /etc/init.d/rtorrent
# version 2013-10-23 (YYYY-MM-DD)
 
### BEGIN INIT INFO
# Provides: rtorrent
# Required-Start: $local_fs $remote_fs
# Required-Stop: $local_fs $remote_fs
# Should-Start: $network
# Should-Stop: $network
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: rTorrent client
# Description: Starts the rTorrent BitTorrent client
### END INIT INFO

# rtorrent-init-script - An initscript to start rTorrent on Ubuntu

# Source function library
. /lib/lsb/init-functions

## Settings
# Username of non-root user who will run the server
USERNAME="YOURUSER"
# Nice looking name of service for script to report back to users
SERVERNAME="rTorrent"
# Full path of server binary
SERVICE="/usr/local/bin/rtorrent"
# Path where config file and session directory can be found
BASEPATH="/home/${USERNAME}/.config/rtorrent"
# Name of configuration file
CONFIGFILE="rtorrent.rc"
# Sets location of config file
CONFIGPATH="${BASEPATH}/${CONFIGFILE}"
# Name of screen session
SCRNAME="rtorrent"
# Set of options to run rtorrent with
OPTIONS="-n -o import=${CONFIGPATH}"
## End Settings

## Functions

# Run all commands as the non-root user
as_user() {
  ME=`whoami`
  if [ $ME == $USERNAME ] ; then
    bash -c "$1"
  else
    su - $USERNAME -c "$1"
  fi
}

# Check if rTorrent is running. If not, say so and exit the script.
check_running() {
  get_session;
  if ! [ -s ${SESSIONPATH}/rtorrent.lock ];
  then
    echo " * ${SERVERNAME} is not running."
    exit 1;
  fi
}

# Get the Process ID of rTorrent from the lockfile
get_pid() {
  PID=`cat ${SESSIONPATH}/rtorrent.lock | awk -F: '{print($2)}' | sed "s/[^0-9]//g"`
}

# Get the session path from the configfile. REQUIRES ABSOLUTE PATH! eg: session = /home/username/.session
get_session() {
  SESSIONPATH=`cat ${CONFIGPATH} | grep "^[[:space:]]*session[[:space:]]*=" | sed "s/^[[:space:]]*session[[:space:]]*=[[:space:]]*//"`
}

# Check the rTorrent binary path exists, check the config file is readable, check the session dir is readable
check_files() {
  if ! [ -f ${SERVICE} ];
  then
    echo " * Cannot find ${SERVERNAME} binary in path ${SERVICE}"
    exit 1;
  fi

  if ! [ -r "${CONFIGPATH}" ];
  then
    echo " * Cannot find readable config file ${CONFIGPATH}"
    exit 1;
  fi

  get_session;
  if ! [ -d "${SESSIONPATH}" ];
  then
    echo " * Cannot find readable session directory ${SESSIONPATH} from config file ${CONFIGFILE}"
  exit 1;
  fi
}

# Start rTorrent as a service within a screen session
do_start() {
  check_files;

  get_session;
  if ! [ -s ${SESSIONPATH}/rtorrent.lock ];
  then
    echo " * Starting ${SERVERNAME}"
    # -fn           : turn flow-control off so ctrl+q works to quit
    # -dmS          : start a detatched screen called $SCRNAME with $SERVICE $OPTIONS inside it
    as_user "cd ${BASEPATH} && screen -fn -dmS ${SCRNAME} ${SERVICE} ${OPTIONS} 2>&1 1>/dev/null"
  else
    get_pid;
    echo " * ${SERVERNAME} was already running! (pid ${PID})"
    exit 1;
  fi
}

do_stop() {
  check_running;

  echo " * Stopping ${SERVERNAME}"

  get_pid;
  # make sure the pid doesn't belong to another process
  if ps -A | grep -sq ${PID}.*${SERVICE##*/};
  then
    kill -s INT ${PID}
  else
    echo " * Failed to stop ${SERVERNAME}. Process ${PID} belongs to something else. Manual intervention required."
    exit 1;
  fi

  # when rTorrent gets SIGINT it waits 5 seconds to send totals to trackers before quitting, so we sleep 5 here
  sleep 5;
}

# Check if process is running and return PID
do_status() {
  check_running;

  echo " * ${SERVERNAME} is running"
}

# Give a bit more information than status
do_info() {
  check_running;

  get_pid;
  RSS="`ps -p ${PID} --format rss | tail -n 1 | awk '{print $1}'`"
  echo "- Base Path             : ${BASEPATH}"
  echo "- Config File           : ${CONFIGPATH}"
  echo "- Screen Session Name   : ${SCRNAME}"
  echo "- rTorrent Session Path : ${SESSIONPATH}"
  echo "- Process ID            : "${PID}""
  echo "- Memory Usage          : `expr ${RSS} / 1024` Mb (${RSS} kb)"
  echo "- Active Connections    : "
  netstat --ip -anp | grep -E "Proto|${SERVICE##*/}"
}

# Connect to the active Screen session. Disconnect with Ctrl+a then d
do_connect() {
  check_running;

  as_user "screen -dr ${SCRNAME}"
}


## These are the parameters passed to the script

case "$1" in
'start')
  do_start;
  ;;
'stop')
  do_stop;
  ;;
'restart')
  do_stop;
  sleep 1
  do_start;
  ;;
'status')
  do_status;
  ;;
'info')
  do_info
  ;;
'connect')
  do_connect;
  ;;
*)
  echo " * Usage: rtorrent {start|stop|restart|status|info|connect}"
  exit 1;
  ;;
esac

exit 0;